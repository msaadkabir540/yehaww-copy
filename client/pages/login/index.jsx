/* eslint-disable @next/next/no-img-element */
import { useEffect, useState } from "react";
import Head from "next/head";
import Link from "next/link";
import { useRouter } from "next/router";
import { useForm } from "react-hook-form";
import { useDispatch } from "react-redux";
import { GoogleOAuthProvider, useGoogleLogin } from "@react-oauth/google";
import FacebookLogin from "react-facebook-login/dist/facebook-login-render-props";

import Input from "components/input";
import Button from "components/button";
import Container from "components/container";
import HeaderComponent from "components/header-compo";
import ResetPasswordModal from "page-sections/reset-password/reset-password-modal";
import ForgetPasswordModal from "page-sections/reset-password/forget-password-modal";

import { socialLogin, login } from "api-services/auth";

import google from "public/assets/icons/google.svg";
import logos_facebook from "public/assets/icons/logos_facebook.svg";

import style from "styles/login.module.scss";

const Login = () => {
  const router = useRouter();
  const dispatch = useDispatch();

  const [resetModal, setResetModal] = useState(false);
  const [forgetModal, setForgetModal] = useState(false);
  const [passwordVisible, setPasswordVisible] = useState(false);
  const [isInternalBrowser, setIsInternalBrowser] = useState(false);

  const {
    setError,
    register,
    handleSubmit,
    formState: { errors, isSubmitting },
  } = useForm();

  const onSubmit = async (data) => {
    data.email = data.email ? data.email.toLowerCase() : "";
    await login({ data, router, dispatch, setError });
  };

  useEffect(() => {
    router?.isReady && router?.query?.reset && setResetModal(true);
  }, [router]);

  useEffect(() => {
    if (typeof window !== "undefined") {
      const userAgent = window.navigator.userAgent;
      const isFacebookBrowser = /FBAV|FB_IAB/i.test(userAgent);
      const isInstagramBrowser = /Instagram/i.test(userAgent);
      const isLinkedInBrowser = /LinkedInApp/i.test(userAgent);
      setIsInternalBrowser(isFacebookBrowser || isInstagramBrowser || isLinkedInBrowser);
    }
  }, []);

  return (
    <>
      <Head>
        <title>Login - Yehaww</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="\assets\imgs\logo.webp" />
      </Head>
      <GoogleOAuthProvider clientId={process.env.NEXT_PUBLIC_GOOGLE_CLIENT_ID}>
        <div className={style.loginMain}>
          <HeaderComponent heading={"Login"} />
          <Container>
            <form onSubmit={handleSubmit(onSubmit)} className={style.formClass}>
              <p className={style.loginPara}>
                Log in to your Yehaww account or
                <Link href="/sign-up">
                  <span
                    style={{
                      marginLeft: "4px",
                    }}
                  >
                    Sign up here.
                  </span>
                </Link>
              </p>
              <div className={style.gridDiv}>
                <Input
                  star="*"
                  label="E-mail Address"
                  type="text"
                  name="email"
                  register={register}
                  errorMessage={errors?.email?.message}
                />
                <Input
                  star="*"
                  label="Password"
                  name="password"
                  register={register}
                  errorMessage={errors?.password?.message}
                  type={passwordVisible === "login" ? "text" : "password"}
                  onClick={() => {
                    setPasswordVisible(passwordVisible === "login" ? false : "login");
                  }}
                  icon={`/assets/icons/eye-${passwordVisible === "login" ? "show" : "hide"}.svg`}
                />
                <p
                  onClick={() => {
                    setForgetModal(true);
                  }}
                >
                  Forgot Password?
                </p>
              </div>
              {!isInternalBrowser && (
                <AuthButton {...{ isSubmitting, router, dispatch, setError }} />
              )}
            </form>
          </Container>
          <ResetPasswordModal resetModal={resetModal} setResetModal={setResetModal} />
          <ForgetPasswordModal forgetModal={forgetModal} setForgetModal={setForgetModal} />
        </div>
      </GoogleOAuthProvider>
    </>
  );
};

export default Login;

const AuthButton = ({ isSubmitting, router, dispatch, setError }) => {
  const login = useGoogleLogin({
    onSuccess: async (res) => {
      const data = {
        code: res?.access_token,
        accountType: "google",
      };
      await socialLogin({ data, router, dispatch, setError });
    },
    onFailure: (err) => console.error(err),
    prompt: "select_account",
    enable_serial_consent: false,
    use_fedcm_for_prompt: false,
  });

  const fbLogin = async (response) => {
    const data = {
      fbUserID: response?.userID,
      code: response.accessToken,
      accountType: "facebook",
    };
    await socialLogin({ data, router, dispatch, setError });
  };

  return (
    <div className={style.btnDiv}>
      <Button title="Login" type="submit" isLoading={isSubmitting} loaderClass={style.btnLoader} />{" "}
      <p>OR</p>
      <Button
        type="button"
        iconStart={google}
        handleClick={login}
        className={style.socialBtn}
        title="Continue with Google"
      />
      <FacebookLogin
        appId={process.env.NEXT_PUBLIC_FACEBOOK_CLIENT_ID}
        autoLoad={false}
        callback={fbLogin}
        render={(renderProps) => (
          <Button
            iconStart={logos_facebook}
            title="Continue with Facebook"
            type="button"
            className={style.socialBtn}
            handleClick={renderProps.onClick}
          />
        )}
      />
    </div>
  );
};
